var search_data = {"index":{"searchIndex":["collection","document","existapi","existexception","testexistapi","[]()","code()","content()","createcollection()","docs()","documents()","execute_query()","existscollection?()","get_hits()","getcollection()","inspect()","load()","new()","new()","new()","new()","remove_collection()","retrieve()","setup()","storeresource()","teardown()","test_00_create_connection()","test_01_createcollection()","test_02_getcollection()","test_03_existscollection?()","test_04_remove_collection()","test_05_storeresource()","test_06_execute_query()","test_07_retrieve()","test_08_get_hits()","test_09_update_insert()","test_10_update_replace()","test_11_update_value()","test_12_update_delete()","test_13_update_rename()","to_s()","to_s()","to_s()","tostring()","update_delete()","update_insert()","update_rename()","update_replace()","update_value()","license","readme","rakefile","rake-d"],"longSearchIndex":["collection","document","existapi","existexception","testexistapi","collection#[]()","existexception#code()","document#content()","existapi#createcollection()","collection#docs()","collection#documents()","existapi#execute_query()","existapi#existscollection?()","existapi#get_hits()","existapi#getcollection()","existexception#inspect()","collection#load()","collection::new()","document::new()","existapi::new()","existexception::new()","existapi#remove_collection()","existapi#retrieve()","testexistapi#setup()","existapi#storeresource()","testexistapi#teardown()","testexistapi#test_00_create_connection()","testexistapi#test_01_createcollection()","testexistapi#test_02_getcollection()","testexistapi#test_03_existscollection?()","testexistapi#test_04_remove_collection()","testexistapi#test_05_storeresource()","testexistapi#test_06_execute_query()","testexistapi#test_07_retrieve()","testexistapi#test_08_get_hits()","testexistapi#test_09_update_insert()","testexistapi#test_10_update_replace()","testexistapi#test_11_update_value()","testexistapi#test_12_update_delete()","testexistapi#test_13_update_rename()","collection#to_s()","document#to_s()","existexception#to_s()","existexception#tostring()","existapi#update_delete()","existapi#update_insert()","existapi#update_rename()","existapi#update_replace()","existapi#update_value()","","","",""],"info":[["Collection","","Collection.html","",""],["Document","","Document.html","",""],["ExistAPI","","ExistAPI.html","","<p>ExistAPI is comunication interface to eXist-db based on XML-RPC. With\neXistAPI  you are able to create, ...\n"],["ExistException","","ExistException.html","","<p>To change this template, choose Tools | Templates and open the template in\nthe editor.\n"],["TestExistAPI","","TestExistAPI.html","",""],["[]","Collection","Collection.html#method-i-5B-5D","(key)","<p>Returns instance of collection's child specified by name.\n\n<pre>* *Args*    :\n  - +key+ -&gt; name of the child ...</pre>\n"],["code","ExistException","ExistException.html#method-i-code","()",""],["content","Document","Document.html#method-i-content","()","<p>Returns content of document in db. Usually document is xml. Retrieves a\ndocument from the database.\n\n<pre>* ...</pre>\n"],["createcollection","ExistAPI","ExistAPI.html#method-i-createcollection","(name, parent_col = nil)","<p>Creates collection with name in parrent(optionaly)\n\n<pre>* *Args*    :\n  - +name+ -&gt; the name of collection ...</pre>\n"],["docs","Collection","Collection.html#method-i-docs","()","<p>Returns string array of all documents in collection\n\n<pre>* *Args*    :\n  - +none+\n* *Returns* :\n  -array of ...</pre>\n"],["documents","Collection","Collection.html#method-i-documents","()","<p>Yield each document from collection.\n\n<pre>* *Args*    :\n  - +none+\n* *Returns* :\n  -documents\n* *Raises* : ...</pre>\n"],["execute_query","ExistAPI","ExistAPI.html#method-i-execute_query","(xquery, parameters = @parameters)","<p>Executes an XQuery and returns a reference identifier to the generated\nresult set. This reference can ...\n"],["existscollection?","ExistAPI","ExistAPI.html#method-i-existscollection-3F","(orig_path)","<p>Checks if collection with path exists or not.\n\n<pre>* *Args*    :\n  - +path+ -&gt; Path of the collection in db. ...</pre>\n"],["get_hits","ExistAPI","ExistAPI.html#method-i-get_hits","(handle)","<p>Get the number of hits in the result-set identified by resultId. example:\ngethits(handle_id)\n\n<pre>* *Args* ...</pre>\n"],["getcollection","ExistAPI","ExistAPI.html#method-i-getcollection","(path)","<p>Returns Collection at specified path.\n\n<pre>* *Args*    :\n  - +path+ -&gt; Path of the collection in db.\n* *Returns* ...</pre>\n"],["inspect","ExistException","ExistException.html#method-i-inspect","()",""],["load","Collection","Collection.html#method-i-load","(collectionName)","<p>Loads collection from db.\n\n<pre>* *Args*    :\n  - +collectionName+ -&gt; e.g. /db/data/cities/\n* *Returns* :\n  ...</pre>\n"],["new","Collection","Collection.html#method-c-new","(client, collectionName)","<p>Creates new collection.\n\n<pre>* *Args*    :\n  - +client+ -&gt; e.g. ExistAPI.new(&quot;http://localhost:8080/exist/xmlrpc&quot;, ...</pre>\n"],["new","Document","Document.html#method-c-new","(client, hash, colname)","<p>Creates new instance of document\n\n<pre>* *Args*    :\n  - +client+ -&gt; e.g. ExistAPI.new(&quot;http://localhost:8080/exist/xmlrpc&quot;, ...</pre>\n"],["new","ExistAPI","ExistAPI.html#method-c-new","(uri = nil , username = nil, password = nil)","<p>Create new instance of ExistAPI.\n<p>example ExistAPI.new(\"localhost:8080/exist/xmlrpc\", \"admin\", ...\n"],["new","ExistException","ExistException.html#method-c-new","(_description = \"Epic fail \\n\", _number = nil)",""],["remove_collection","ExistAPI","ExistAPI.html#method-i-remove_collection","(path)","<p>Removes collection with specified path.\n\n<pre>* *Args*    :\n  - +path+ -&gt; Path of the collection in db.\n* *Returns* ...</pre>\n"],["retrieve","ExistAPI","ExistAPI.html#method-i-retrieve","(handle, pos)","<p>Retrieves a single result-fragment from the result-set referenced by\nresultId.  The result-fragment is ...\n"],["setup","TestExistAPI","TestExistAPI.html#method-i-setup","()",""],["storeresource","ExistAPI","ExistAPI.html#method-i-storeresource","(_res, _docname, _overwrite = 1)","<p>Stores resource to document in db. Inserts a new document into the database\nor replace an existing one: ...\n"],["teardown","TestExistAPI","TestExistAPI.html#method-i-teardown","()",""],["test_00_create_connection","TestExistAPI","TestExistAPI.html#method-i-test_00_create_connection","()",""],["test_01_createcollection","TestExistAPI","TestExistAPI.html#method-i-test_01_createcollection","()",""],["test_02_getcollection","TestExistAPI","TestExistAPI.html#method-i-test_02_getcollection","()",""],["test_03_existscollection?","TestExistAPI","TestExistAPI.html#method-i-test_03_existscollection-3F","()",""],["test_04_remove_collection","TestExistAPI","TestExistAPI.html#method-i-test_04_remove_collection","()",""],["test_05_storeresource","TestExistAPI","TestExistAPI.html#method-i-test_05_storeresource","()",""],["test_06_execute_query","TestExistAPI","TestExistAPI.html#method-i-test_06_execute_query","()",""],["test_07_retrieve","TestExistAPI","TestExistAPI.html#method-i-test_07_retrieve","()",""],["test_08_get_hits","TestExistAPI","TestExistAPI.html#method-i-test_08_get_hits","()",""],["test_09_update_insert","TestExistAPI","TestExistAPI.html#method-i-test_09_update_insert","()",""],["test_10_update_replace","TestExistAPI","TestExistAPI.html#method-i-test_10_update_replace","()",""],["test_11_update_value","TestExistAPI","TestExistAPI.html#method-i-test_11_update_value","()",""],["test_12_update_delete","TestExistAPI","TestExistAPI.html#method-i-test_12_update_delete","()",""],["test_13_update_rename","TestExistAPI","TestExistAPI.html#method-i-test_13_update_rename","()",""],["to_s","Collection","Collection.html#method-i-to_s","()","<p>Returns string of collection. That inclunde permissions, owner, group and\nname.\n\n<pre>* *Args*    :\n  - +none+ ...</pre>\n"],["to_s","Document","Document.html#method-i-to_s","()","<p>Returns string of document. That inclunde permissions, owner, group and\nname.\n\n<pre>* *Args*    :\n  - +none+ ...</pre>\n"],["to_s","ExistException","ExistException.html#method-i-to_s","()",""],["tostring","ExistException","ExistException.html#method-i-tostring","()",""],["update_delete","ExistAPI","ExistAPI.html#method-i-update_delete","(expr)","<p>Removes all nodes in expr from their document.\n\n<pre>* *Args*    :\n  - +expr+ -&gt; &quot;//node()[@id=&quot;RockyRacoon&quot;] ...</pre>\n"],["update_insert","ExistAPI","ExistAPI.html#method-i-update_insert","(expr, pos, expr_single)","<p>Inserts the content sequence specified in expr into the element node passed\nvia exprSingle. exprSingle ...\n"],["update_rename","ExistAPI","ExistAPI.html#method-i-update_rename","(expr, expr_single)","<p>Renames the nodes in expr using the string value of the first item in \nexprSingle as the new name of ...\n"],["update_replace","ExistAPI","ExistAPI.html#method-i-update_replace","(expr, expr_single)","<p>Replaces the nodes returned by expr with the nodes in exprSingle.  expr may\nevaluate to a single element, ...\n"],["update_value","ExistAPI","ExistAPI.html#method-i-update_value","(expr, expr_single)","<p>Updates the content of all nodes in expr with the items in exprSingle.  If\nexpr is an attribute or text ...\n"],["LICENSE","","LICENSE.html","","<p>eXistAPI\n<p>eXistAPI is copyrighted free software.\n<p>You can redistribute it and/or modify it under either the ...\n"],["README","","README.html","","<p>ExistAPI - eXist-db communication client \n<p>rubygem  &mdash; rubygems.org/gems/eXistAPI\n<p>github  &mdash; github.com/sirljan/eXistAPI ...\n"],["Rakefile","","Rakefile.html","","<p>#  # To change this template, choose Tools | Templates # and open the\ntemplate in the editor.\n<p>require ...\n"],["rake-d","","nbproject/private/rake-d_txt.html","","<p>clean= clobber= clobber_package= clobber_rdoc= doc= doc/rdoc=\ndoc/rdoc/index.html= gem= package= pkg= ...\n"]]}}